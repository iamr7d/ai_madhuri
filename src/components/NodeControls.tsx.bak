import React, { useCallback, useState, useEffect } from 'react';
import { useReactFlow, Panel, useStore } from 'reactflow';
import { Box, IconButton, Tooltip, Fade, Badge } from '@mui/material';
import {
  ZoomIn as ZoomInIcon,
  ZoomOut as ZoomOutIcon,
  CenterFocusStrong as CenterIcon,
  FitScreen as FitViewIcon,
  Undo as UndoIcon,
  Redo as RedoIcon,
} from '@mui/icons-material';

interface NodeControlsProps {
  onUndo?: () => void;
  onRedo?: () => void;
  canUndo?: boolean;
  canRedo?: boolean;
}

const NodeControls: React.FC<NodeControlsProps> = ({
  onUndo,
  onRedo,
  canUndo = false,
  canRedo = false,
}) => {
  const { zoomIn, zoomOut, fitView, setCenter, getNodes } = useReactFlow();
  const [showControls, setShowControls] = useState(true);
  const [zoomLevel, setZoomLevel] = useState(1);
  const zoom = useStore((state) => state.transform[2]);

  useEffect(() => {
    setZoomLevel(zoom);
  }, [zoom]);

  const handleZoomIn = useCallback(() => {
    zoomIn({ duration: 300 });
  }, [zoomIn]);

  const handleZoomOut = useCallback(() => {
    zoomOut({ duration: 300 });
  }, [zoomOut]);

  const handleCenter = useCallback(() => {
    const nodes = getNodes();
    if (nodes.length > 0) {
      const centerX = nodes.reduce((sum, node) => sum + node.position.x, 0) / nodes.length;
      const centerY = nodes.reduce((sum, node) => sum + node.position.y, 0) / nodes.length;
      setCenter(centerX, centerY, { zoom: 1, duration: 800 });
    }
  }, [setCenter, getNodes]);

  const handleFitView = useCallback(() => {
    fitView({ duration: 800, padding: 0.1 });
  }, [fitView]);

  return (
    <Panel position="top-right" style={{ marginRight: '10px' }}>
      <Fade in={showControls}>
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            gap: 1,
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
            backdropFilter: 'blur(8px)',
            padding: 1,
            borderRadius: 2,
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            transition: 'all 0.3s ease',
            '&:hover': {
              backgroundColor: 'rgba(0, 0, 0, 0.75)',
              transform: 'translateY(-2px)',
              boxShadow: '0 6px 16px rgba(0, 0, 0, 0.2)',
            },
          }}
        >
          {onUndo && (
            <Tooltip title="Undo" placement="left">
              <span>
                <IconButton
                  onClick={onUndo}
                  size="small"
                  disabled={!canUndo}
                  sx={{
                    color: 'rgba(255, 255, 255, 0.9)',
                    '&:hover': { color: 'primary.main' },
                    '&.Mui-disabled': { color: 'rgba(255, 255, 255, 0.3)' },
                  }}
                >
                  <UndoIcon />
                </IconButton>
              </span>
            </Tooltip>
          )}

          {onRedo && (
            <Tooltip title="Redo" placement="left">
              <span>
                <IconButton
                  onClick={onRedo}
                  size="small"
                  disabled={!canRedo}
                  sx={{
                    color: 'rgba(255, 255, 255, 0.9)',
                    '&:hover': { color: 'primary.main' },
                    '&.Mui-disabled': { color: 'rgba(255, 255, 255, 0.3)' },
                  }}
                >
                  <RedoIcon />
                </IconButton>
              </span>
            </Tooltip>
          )}

          <Tooltip title="Zoom In" placement="left">
            <IconButton
              onClick={handleZoomIn}
              size="small"
              sx={{
                color: 'rgba(255, 255, 255, 0.9)',
                '&:hover': { color: 'primary.main' },
              }}
            >
              <Badge
                badgeContent={Math.round(zoomLevel * 100) + '%'}
                color="primary"
                sx={{
                  '& .MuiBadge-badge': {
                    fontSize: '0.6rem',
                    minWidth: '35px',
                    height: '16px',
                    padding: '0 4px',
                  },
                }}
              >
                <ZoomInIcon />
              </Badge>
            </IconButton>
          </Tooltip>
          
          <Tooltip title="Zoom Out" placement="left">
            <IconButton
              onClick={handleZoomOut}
              size="small"
              sx={{
                color: 'rgba(255, 255, 255, 0.9)',
                '&:hover': { color: 'primary.main' },
              }}
            >
              <ZoomOutIcon />
            </IconButton>
          </Tooltip>
          
          <Tooltip title="Center View" placement="left">
            <IconButton
              onClick={handleCenter}
              size="small"
              sx={{
                color: 'rgba(255, 255, 255, 0.9)',
                '&:hover': { color: 'primary.main' },
              }}
            >
              <CenterIcon />
            </IconButton>
          </Tooltip>
          
          <Tooltip title="Fit View" placement="left">
            <IconButton
              onClick={handleFitView}
              size="small"
              sx={{
                color: 'rgba(255, 255, 255, 0.9)',
                '&:hover': { color: 'primary.main' },
              }}
            >
              <FitViewIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Fade>
    </Panel>
  );
};

export default NodeControls;
